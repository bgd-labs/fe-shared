{"version":3,"file":"bgd-fe-utils.cjs.development.js","sources":["../src/utils/localStorage.ts","../src/web3/connectors/impersonatedConnector.ts","../src/web3/connectors/index.ts","../src/web3/store/transactionsSelectors.ts","../src/web3/store/transactionsSlice.ts","../src/web3/store/walletSlice.ts","../src/web3/providers/Web3Provider.tsx"],"sourcesContent":["import { BaseTx, TransactionPool } from \"../web3/store/transactionsSlice\";\nimport { WalletType } from '../web3/connectors';\n\nexport enum LocalStorageKeys {\n  LastConnectedWallet = 'LastConnectedWallet',\n  TransactionPool = 'TransactionPool'\n}\n\nexport const setLocalStorageTxPool = <T extends BaseTx>(pool: TransactionPool<T>) => {\n  const stringifiedPool = JSON.stringify(pool);\n  localStorage.setItem(LocalStorageKeys.TransactionPool, stringifiedPool);\n};\n\nexport const getLocalStorageTxPool = () => {\n  return localStorage.getItem(LocalStorageKeys.TransactionPool)\n};\n\n\nexport const setLocalStorageWallet = (walletType: WalletType) => {\n  localStorage.setItem(LocalStorageKeys.LastConnectedWallet, walletType);\n};\n\nexport const deleteLocalStorageWallet = () => {\n  localStorage.removeItem(LocalStorageKeys.LastConnectedWallet);\n};","import { Connector, Actions } from \"@web3-react/types\";\nimport { ethers, providers } from \"ethers\";\n\nexport class ImpersonatedProvider extends providers.JsonRpcProvider {\n  private copyProvider: providers.JsonRpcProvider;\n  constructor(url: string) {\n    super(url);\n    this.copyProvider = new providers.JsonRpcProvider(url);\n  }\n  getSigner(address: string): ethers.providers.JsonRpcSigner {\n    return this.copyProvider.getUncheckedSigner(address);\n  }\n}\n\nexport class ImpersonatedConnector extends Connector {\n  private rpcURL: string;\n  constructor(\n    actions: Actions,\n    options: {\n      rpcUrl: string;\n    }\n  ) {\n    super(actions);\n    this.rpcURL = options.rpcUrl;\n  }\n  activate(address: string): void | Promise<void> {\n    this.actions.startActivation();\n    this.customProvider = new ImpersonatedProvider(this.rpcURL);\n    this.actions.update({\n      chainId: 1,\n      accounts: [address],\n    });\n  }\n}\n\n","import { CoinbaseWallet } from \"@web3-react/coinbase-wallet\";\nimport { initializeConnector } from \"@web3-react/core\";\nimport { MetaMask } from \"@web3-react/metamask\";\nimport type { AddEthereumChainParameter } from \"@web3-react/types\";\nimport { WalletConnect } from \"@web3-react/walletconnect\";\nimport { Connector } from '@web3-react/types';\n\nimport { ImpersonatedConnector } from \"./impersonatedConnector\";\n\nexport interface BasicChainInformation {\n  urls: string[];\n  name: string;\n}\n\nexport interface ExtendedChainInformation extends BasicChainInformation {\n  nativeCurrency: AddEthereumChainParameter[\"nativeCurrency\"];\n  blockExplorerUrls: AddEthereumChainParameter[\"blockExplorerUrls\"];\n}\n\nexport type AllConnectorsInitProps = {\n  appName: string;\n  chains: Record<number, BasicChainInformation | ExtendedChainInformation>;\n  desiredChainId: number;\n};\n\nexport const initAllConnectors = (\n  props: AllConnectorsInitProps\n) => {\n  const metaMask = initializeConnector<MetaMask>(\n    (actions) => new MetaMask({ actions })\n  );\n\n  const URLS: { [chainId: number]: string[] } = Object.keys(\n    props.chains\n  ).reduce<{ [chainId: number]: string[] }>((accumulator, chainId) => {\n    const validURLs: string[] = props.chains[Number(chainId)].urls;\n\n    if (validURLs.length) {\n      accumulator[Number(chainId)] = validURLs;\n    }\n\n    return accumulator;\n  }, {});\n\n  const walletConnect = initializeConnector<WalletConnect>(\n    (actions) =>\n      new WalletConnect({\n        actions,\n        options: {\n          rpc: URLS,\n        },\n      })\n  );\n\n  const coinbase = initializeConnector<CoinbaseWallet>(\n    (actions) =>\n      new CoinbaseWallet({\n        actions,\n        options: {\n          url: props.chains[props.desiredChainId].urls[0],\n          appName: props.appName,\n        },\n      })\n  );\n\n  const impersonatedConnector = initializeConnector<ImpersonatedConnector>(\n    (actions) =>\n      new ImpersonatedConnector(actions, {\n        rpcUrl: props.chains[props.desiredChainId].urls[0],\n      })\n  );\n\n  return [metaMask, walletConnect, coinbase, impersonatedConnector];\n};\n\n\nexport type WalletType =\n    | \"Metamask\"\n    | \"WalletConnect\"\n    | \"Coinbase\"\n    | \"Impersonated\";\n\nexport function getConnectorName(connector: Connector): WalletType | undefined {\n  if (connector instanceof MetaMask) return \"Metamask\";\n  if (connector instanceof WalletConnect) return \"WalletConnect\";\n  if (connector instanceof CoinbaseWallet) return \"Coinbase\";\n  if (connector instanceof ImpersonatedConnector) return \"Impersonated\";\n  return;\n}\n","import { BaseTx, ITransactionsState } from \"./transactionsSlice\";\n\nexport const selectAllTransactions = <T extends BaseTx>(\n  state: ITransactionsState<T>\n) => {\n  return Object.values(state.transactionsPool).sort(\n    (a, b) => a.nonce - b.nonce\n  );\n};\n\nexport const selectPendingTransactions = <T extends BaseTx>(\n  state: ITransactionsState<T>\n) => {\n  return selectAllTransactions(state).filter((tx) => tx.pending);\n};\n\nexport const selectTXByHash = <T extends BaseTx>(\n  state: ITransactionsState<T>,\n  hash: string\n) => {\n  return state.transactionsPool[hash]\n};\n","import { ethers, providers } from \"ethers\";\n\nimport produce, { Draft } from \"immer\";\nimport { StoreSlice } from \"../../types/store\";\nimport {\n  getLocalStorageTxPool,\n  setLocalStorageTxPool,\n} from \"../../utils/localStorage\";\nimport { Web3Slice } from \"./walletSlice\";\n\nexport type BaseTx = {\n  type: string;\n  hash: string;\n  from: string;\n  to: string;\n  nonce: number;\n  payload?: object;\n  chainId: number;\n};\n\nexport type ProvidersRecord = Record<number, ethers.providers.JsonRpcProvider>;\n\nexport type TransactionPool<T extends BaseTx> = Record<string, T>;\n\nexport interface ITransactionsState<T extends BaseTx> {\n  transactionsPool: TransactionPool<\n    T & {\n      status?: number;\n      pending: boolean;\n    }\n  >;\n}\n\ninterface ITransactionsActions<T extends BaseTx> {\n  txStatusChangedCallback: (\n    data: T & {\n      status?: number;\n    }\n  ) => void;\n  executeTx: (params: {\n    body: () => Promise<ethers.ContractTransaction>;\n    params: {\n      type: T[\"type\"];\n      payload: T[\"payload\"];\n    };\n  }) => Promise<\n    T & {\n      status?: number;\n      pending: boolean;\n    }\n  >;\n  waitForTx: (hash: string) => Promise<void>;\n  updateTXStatus: (hash: string, status?: number) => void;\n  initTxPool: () => void;\n}\n\nexport type ITransactionsSlice<T extends BaseTx> = ITransactionsActions<T> &\n  ITransactionsState<T>;\n\nexport function createTransactionsSlice<T extends BaseTx>({\n  txStatusChangedCallback,\n  providers,\n}: {\n  txStatusChangedCallback: (tx: T) => void;\n  providers: ProvidersRecord;\n}): StoreSlice<\n  ITransactionsSlice<T>,\n  Pick<Web3Slice, \"checkAndSwitchNetwork\">\n> {\n  return (set, get) => ({\n    transactionsPool: {},\n    txStatusChangedCallback,\n    executeTx: async ({ body, params }) => {\n      await get().checkAndSwitchNetwork();\n      const tx = await body();\n      const chainId = Number(tx.chainId);\n      const transaction = {\n        chainId,\n        hash: tx.hash,\n        type: params.type,\n        payload: params.payload,\n        from: tx.from,\n        to: tx.to,\n        nonce: tx.nonce,\n      };\n      set((state) =>\n        produce(state, (draft) => {\n          draft.transactionsPool[transaction.hash] = {\n            ...transaction,\n            pending: true,\n          } as Draft<\n            T & {\n              pending: boolean;\n            }\n          >;\n        })\n      );\n      const txPool = get().transactionsPool;\n      setLocalStorageTxPool(txPool);\n      get().waitForTx(tx.hash);\n      return txPool[tx.hash];\n    },\n\n    waitForTx: async (hash) => {\n      const txData = get().transactionsPool[hash];\n      if (txData) {\n        const provider = providers[txData.chainId] as providers.JsonRpcProvider;\n\n        const tx = await provider.getTransaction(hash);\n        const txn = await tx.wait();\n        get().updateTXStatus(hash, txn.status);\n        const updatedTX = get().transactionsPool[hash];\n        get().txStatusChangedCallback({\n          ...updatedTX,\n        });\n      } else {\n        // TODO: no transaction in waiting pool\n      }\n    },\n    updateTXStatus: (hash, status) => {\n      set((state) =>\n        produce(state, (draft) => {\n          draft.transactionsPool[hash].status = status;\n          draft.transactionsPool[hash].pending = false;\n        })\n      );\n\n      setLocalStorageTxPool(get().transactionsPool);\n    },\n    initTxPool: () => {\n      const localStorageTXPool = getLocalStorageTxPool();\n      if (localStorageTXPool) {\n        const transactionsPool = JSON.parse(localStorageTXPool);\n        // TODO: figure out type casting from string via ZOD or similar\n        set(() => ({\n          transactionsPool,\n        }));\n      }\n      Object.values(get().transactionsPool).forEach((tx) => {\n        if (tx.pending) {\n          get().waitForTx(tx.hash);\n        }\n      });\n    },\n  });\n}\n","import type { AddEthereumChainParameter, Connector } from \"@web3-react/types\";\nimport { providers } from \"ethers\";\nimport { produce } from \"immer\";\n\nimport { StoreSlice } from \"../../types/store\";\nimport {\n  deleteLocalStorageWallet,\n  LocalStorageKeys,\n  setLocalStorageWallet,\n} from \"../../utils/localStorage\";\nimport { getConnectorName, WalletType } from '../connectors';\n\nexport interface Wallet {\n  walletType: WalletType;\n  accounts: string[];\n  chainId?: number;\n  provider: providers.JsonRpcProvider; // TODO: not correct\n  signer: providers.JsonRpcSigner; // TODO: not correct, it can be not only JsonRpc\n  // isActive is added, because Wallet can be connected but not active, i.e. wrong network\n  isActive: boolean;\n}\n\nexport type Web3Slice = {\n  activeWallet?: Wallet;\n  getActiveAddress: () => string | undefined;\n  connectWallet: (walletType: WalletType) => Promise<void>;\n  disconnectActiveWallet: () => Promise<void>;\n  walletActivating: boolean;\n  initDefaultWallet: () => Promise<void>;\n  setActiveWallet: (wallet: Omit<Wallet, \"signer\">) => void;\n  changeActiveWalletChainId: (chainId: number) => void;\n  checkAndSwitchNetwork: () => Promise<void>;\n  connectors: Connector[];\n  setConnectors: (connectors: Connector[]) => void;\n  _impersonatedAddress?: string;\n};\n\nexport function createWeb3Slice({\n  walletConnected,\n  getAddChainParameters,\n  desiredChainID = 1,\n}: {\n  walletConnected: (wallet: Wallet) => void; // TODO: why all of them here hardcoded\n  getAddChainParameters: (\n    chainId: number\n  ) => AddEthereumChainParameter | number;\n  desiredChainID?: number;\n}): StoreSlice<Web3Slice> {\n  return (set, get) => ({\n    walletActivating: false,\n    connectors: [],\n    setConnectors: (connectors) => {\n      set(() => ({ connectors }));\n      void get().initDefaultWallet();\n    },\n    initDefaultWallet: async () => {\n      const lastConnectedWallet = localStorage.getItem(\n        LocalStorageKeys.LastConnectedWallet\n      ) as WalletType | undefined;\n      if (lastConnectedWallet) {\n        await get().connectWallet(lastConnectedWallet);\n        await get().checkAndSwitchNetwork();\n      }\n    },\n    connectWallet: async (walletType: WalletType) => {\n      if (get().activeWallet?.walletType !== walletType) {\n        await get().disconnectActiveWallet();\n      }\n\n      const impersonatedAddress = get()._impersonatedAddress;\n      set({ walletActivating: true });\n      const connector = get().connectors.find(\n        connector => getConnectorName(connector) === walletType\n      );\n      if (connector) {\n        switch (walletType) {\n          case \"Impersonated\":\n            if (impersonatedAddress) {\n              await connector.activate(impersonatedAddress);\n            }\n            break;\n          case \"Coinbase\":\n          case \"Metamask\":\n            await connector.activate(\n              getAddChainParameters(desiredChainID)\n            );\n            break;\n          case \"WalletConnect\":\n            await connector.activate(desiredChainID);\n            break;\n        }\n        setLocalStorageWallet(walletType);\n      }\n      set({ walletActivating: false });\n    },\n    checkAndSwitchNetwork: async () => {\n      const activeWallet = get().activeWallet;\n      if (activeWallet) {\n        await get().connectWallet(activeWallet.walletType);\n      }\n    },\n    disconnectActiveWallet: async () => {\n      const activeWallet = get().activeWallet;\n      if (activeWallet) {\n        const activeConnector = get().connectors.find(\n          connector => getConnectorName(connector) == activeWallet.walletType\n        );\n\n        if (activeConnector?.deactivate) {\n          await activeConnector.deactivate();\n        }\n        await activeConnector?.resetState();\n        set({ activeWallet: undefined });\n      }\n      deleteLocalStorageWallet();\n    },\n    /**\n     * setActiveWallet is separate from connectWallet for a reason, after metaMask.activate()\n     * only provider is available in the returned type, but we also need accounts and chainID which for some reason\n     * is impossible to pull from .provider() still not the best approach, and I'm looking to find proper way to handle it\n     */\n    setActiveWallet: (wallet: Omit<Wallet, \"signer\">) => {\n      const providerSigner =\n        wallet.walletType == \"Impersonated\"\n          ? wallet.provider.getSigner(get()._impersonatedAddress)\n          : wallet.provider.getSigner(0);\n      set({\n        activeWallet: {\n          ...wallet,\n          signer: providerSigner,\n        },\n      });\n      const activeWallet = get().activeWallet;\n      if (activeWallet) {\n        walletConnected(activeWallet);\n      }\n    },\n    changeActiveWalletChainId: (chainId: number) => {\n      set((state) =>\n        produce(state, (draft) => {\n          if (draft.activeWallet) {\n            draft.activeWallet.chainId = chainId;\n          }\n        })\n      );\n    },\n\n    getActiveAddress: () => {\n      const activeWallet = get().activeWallet;\n      if (activeWallet && activeWallet.accounts) {\n        return activeWallet.accounts[0];\n      }\n      return undefined\n    },\n  });\n}\n","import React, { useEffect } from 'react';\nimport { UseBoundStore, StoreApi } from 'zustand';\nimport { useWeb3React, Web3ReactProvider } from '@web3-react/core';\nimport { Connector } from '@web3-react/types';\n\nimport { Wallet } from '../store/walletSlice';\nimport {\n  AllConnectorsInitProps,\n  initAllConnectors,\n  getConnectorName,\n} from '../connectors';\n\ninterface Web3ProviderProps {\n  useStore: UseBoundStore<\n    StoreApi<{\n      setActiveWallet: (wallet: Omit<Wallet, 'signer'>) => void;\n      changeActiveWalletChainId: (chainID: number) => void;\n      setConnectors: (connectors: Connector[]) => void;\n      initTxPool: () => void;\n    }>\n  >;\n  connectorsInitProps: AllConnectorsInitProps;\n}\n\nfunction Child({\n  useStore,\n  connectors,\n}: Omit<Web3ProviderProps, 'connectorsInitProps'> & {\n  connectors: Connector[];\n}) {\n  const { connector, chainId, isActive, accounts, provider } = useWeb3React();\n\n  const setActiveWallet = useStore(state => state.setActiveWallet);\n  const changeChainID = useStore(state => state.changeActiveWalletChainId);\n  const setConnectors = useStore(state => state.setConnectors);\n  const initTxPool = useStore(state => state.initTxPool);\n\n  useEffect(() => {\n    setConnectors(connectors);\n  }, [connectors]);\n\n  useEffect(() => {\n    initTxPool();\n  }, [initTxPool]);\n\n  useEffect(() => {\n    const walletType = connector && getConnectorName(connector);\n    if (walletType && accounts && isActive && provider) {\n      // TODO: don't forget to change to different\n      setActiveWallet({\n        walletType,\n        accounts,\n        chainId,\n        provider,\n        isActive,\n      });\n    }\n  }, [isActive, chainId, provider, accounts]);\n\n  useEffect(() => {\n    if (chainId) {\n      changeChainID(chainId);\n    }\n  }, [chainId]);\n  return null;\n}\n\nexport function Web3Provider({\n  useStore,\n  connectorsInitProps,\n}: Web3ProviderProps) {\n  const connectors = initAllConnectors(connectorsInitProps);\n  return (\n    <Web3ReactProvider connectors={connectors}>\n      <Child\n        useStore={useStore}\n        connectors={connectors.map(connector => connector[0])}\n      />\n    </Web3ReactProvider>\n  );\n}\n"],"names":["LocalStorageKeys","setLocalStorageTxPool","pool","stringifiedPool","JSON","stringify","localStorage","setItem","TransactionPool","getLocalStorageTxPool","getItem","setLocalStorageWallet","walletType","LastConnectedWallet","deleteLocalStorageWallet","removeItem","ImpersonatedProvider","url","copyProvider","providers","JsonRpcProvider","getSigner","address","getUncheckedSigner","ImpersonatedConnector","actions","options","rpcURL","rpcUrl","activate","startActivation","customProvider","update","chainId","accounts","Connector","initAllConnectors","props","metaMask","initializeConnector","MetaMask","URLS","Object","keys","chains","reduce","accumulator","validURLs","Number","urls","length","walletConnect","WalletConnect","rpc","coinbase","CoinbaseWallet","desiredChainId","appName","impersonatedConnector","getConnectorName","connector","selectAllTransactions","state","values","transactionsPool","sort","a","b","nonce","selectPendingTransactions","filter","tx","pending","selectTXByHash","hash","createTransactionsSlice","txStatusChangedCallback","set","get","executeTx","body","params","checkAndSwitchNetwork","transaction","type","payload","from","to","produce","draft","txPool","waitForTx","txData","provider","getTransaction","wait","txn","updateTXStatus","status","updatedTX","initTxPool","localStorageTXPool","parse","forEach","createWeb3Slice","walletConnected","getAddChainParameters","desiredChainID","walletActivating","connectors","setConnectors","initDefaultWallet","lastConnectedWallet","connectWallet","activeWallet","disconnectActiveWallet","impersonatedAddress","_impersonatedAddress","find","activeConnector","deactivate","resetState","undefined","setActiveWallet","wallet","providerSigner","signer","changeActiveWalletChainId","getActiveAddress","Child","useStore","useWeb3React","isActive","changeChainID","useEffect","Web3Provider","connectorsInitProps","React","Web3ReactProvider","map"],"mappings":"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"}